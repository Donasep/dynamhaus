server {
    #proxy_cache cache; # Optionnel, à décommenter si vous avez besoin de caching proxy
    #proxy_cache_valid 200 1s;

    # Azure App Service mappe le port externe (80/443) au port interne sur lequel votre application écoute.
    # Le port 8080 est souvent utilisé par défaut pour les conteneurs PHP sur App Service.
    # Vous ne devriez normalement pas avoir à changer 'listen' si vous utilisez les images standards d'Azure.
    listen 8080;
    # listen [::]:8080; # Pour IPv6 si nécessaire

    # La racine de votre application sur Azure App Service
    root /home/site/wwwroot;

    # Fichiers d'index par défaut
    index index.php index.html index.htm;

    # Le nom du serveur n'est généralement pas nécessaire sur App Service car il est géré par la plateforme.
    # server_name example.com www.example.com; # À commenter ou supprimer sauf si vous avez une raison spécifique

    # Assure que Nginx ne change pas le port dans les redirections s'il y a un proxy en amont (comme sur Azure)
    port_in_redirect off;

    # Bloc principal pour gérer les requêtes
    location / {
        # Fichiers d'index pour ce bloc location (redondant avec 'index' global mais ne fait pas de mal)
        index index.php index.html index.htm hostingstart.html;

        # Règle de réécriture pour un routeur PHP "front controller"
        # Essaie de servir le fichier/répertoire demandé.
        # Si introuvable, passe à index.php en ajoutant le chemin d'origine comme paramètre 'path'
        # et en conservant les autres paramètres de la requête originale ($args).
        try_files $uri $uri/ /index.php?path=$uri&$args;
    }

    # Redirection des pages d'erreur serveur (optionnel, mais bonne pratique si vous avez une page 50x.html)
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        # Assurez-vous que ce chemin est correct par rapport à votre `root` ou spécifiez un `root` différent ici.
        # Si 50x.html est dans /home/site/wwwroot/errors/50x.html, vous pourriez faire :
        # root /home/site/wwwroot/errors;
        # Ou si c'est à la racine :
        root /home/site/wwwroot; # ou simplement ne rien mettre si c'est le même que le root global
    }

    # Empêcher l'accès aux fichiers .env (bonne pratique de sécurité)
    location = /.env {
        deny all;
        return 404; # Ou 403 Forbidden
    }
    location = /.env.example { # Idem pour .env.example si vous ne voulez pas qu'il soit accessible
        deny all;
        return 404;
    }

    # Empêcher l'accès au répertoire .git (très important pour la sécurité)
    location ~ /\.git {
        deny all;
        # Les logs d'accès et d'erreur pour ces tentatives peuvent être désactivés pour ne pas polluer.
        # access_log off;
        # log_not_found off;
        return 404; # Ou 403
    }

    # Bloc pour la gestion des fichiers PHP via PHP-FPM
    # Cette section est généralement bien configurée par défaut sur Azure App Service pour PHP.
    # Vous ne devriez la modifier que si vous savez exactement ce que vous faites et pourquoi.
    location ~ \.php$ { # Correspond à toute URI se terminant par .php
        try_files $uri =404; # S'assurer que le fichier .php existe réellement, sinon erreur 404

        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        
        # Chemin vers le socket PHP-FPM ou port TCP/IP.
        # Sur Azure App Service, ceci est géré par la plateforme.
        # La valeur 127.0.0.1:9000 est un placeholder commun si vous configurez FPM manuellement,
        # mais sur Azure, il est préférable de ne PAS surcharger fastcgi_pass sauf si explicitement nécessaire
        # et que vous connaissez le bon endpoint FPM de l'image Azure.
        fastcgi_pass 127.0.0.1:9000; # VÉRIFIEZ SI CELA EST NÉCESSAIRE OU CORRECT POUR AZURE.
                                      # Souvent, il vaut mieux ne pas inclure cette ligne ici si l'image de base
                                      # a déjà une configuration PHP globale qui le gère.

        include fastcgi_params; # Inclut les paramètres FastCGI standards

        # Définition correcte de SCRIPT_FILENAME
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        
        # Passer PATH_INFO si votre application l'utilise (certains frameworks/routeurs)
        fastcgi_param PATH_INFO $fastcgi_path_info;
        
        # La query string est déjà passée par $args dans le try_files,
        # mais la réinclure ici ne fait pas de mal ou est parfois attendue par fastcgi_params.
        # fastcgi_param QUERY_STRING $query_string; 

        fastcgi_param HTTP_PROXY ""; # Efface le header Proxy pour des raisons de sécurité

        fastcgi_intercept_errors on; # Permet à Nginx de gérer les pages d'erreur de PHP-FPM (ex: 50x.html)

        # Timeouts et buffers (les valeurs de votre exemple sont assez généreuses)
        fastcgi_connect_timeout 300s; # Notez le 's' pour secondes, Nginx préfère souvent sans unité pour ms
        fastcgi_send_timeout 3600s;
        fastcgi_read_timeout 3600s;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
    }

    # Optionnel: Gérer les fichiers statiques directement pour de meilleures performances
    # et pour éviter qu'ils ne passent par la règle try_files du bloc location /
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot|otf|webmanifest|xml|txt)$ {
        # try_files $uri =404; # Optionnel: renvoyer 404 si le fichier statique n'existe pas
        expires 1M; # Mettre en cache par le navigateur pendant 1 mois
        access_log off; # Désactiver les logs d'accès pour ces fichiers
        add_header Cache-Control "public";
    }
}